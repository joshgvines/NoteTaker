plugins {
    id 'java'
}

group 'com.notetaker'

repositories {
    mavenCentral()
}

dependencies {
    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

task releaseWithBranch() {
    String pv = project.version.toString()
    println(">> is version: " + pv)
    doLast {
        String branch = getCurrentGitBranch()
        if (branch.contains("release/")) {
            String[] v = branch.split('/')

            String version = v[1]

            println(">> new version: " + version)
            ant.replace(file: 'gradle.properties', token: pv, value: version)

            ("git tag $version").execute()
            ("git push --tags").execute()
        }
    }
}

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}
